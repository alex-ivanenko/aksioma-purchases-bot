# bot/handlers.py
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from .states import PurchaseForm
from .config import AUTHORIZED_USERS
from .airtable_client import AirtableClient
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ —Ä–∞–±–æ—Ç—É —Å –¥–∞—Ç–∞–º–∏
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from datetime import datetime, date

router = Router()
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç Airtable (–æ–¥–∏–Ω –Ω–∞ –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
airtable_client = AirtableClient()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ /start –∏ –≤ –∫–æ–Ω—Ü–µ –¥–∏–∞–ª–æ–≥–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∞" ‚Äî –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞
cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–∞–≥–∞ "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ" –∏ "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" ‚Äî —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∞"
skip_cancel_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def is_authorized(user) -> bool:
    return user.id in AUTHORIZED_USERS

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@router.message(CommandStart())
async def cmd_start(message: Message):
    if not is_authorized(message.from_user):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
        reply_markup=main_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É"
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É")
async def start_purchase_flow(message: Message, state: FSMContext):
    if not is_authorized(message.from_user):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:", reply_markup=cancel_kb)
    await state.set_state(PurchaseForm.name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞", reply_markup=main_kb)
        return
    await state.clear()
    await message.answer("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=main_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
@router.message(PurchaseForm.name, F.text)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=cancel_kb)
    await state.set_state(PurchaseForm.quantity)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
@router.message(PurchaseForm.quantity, F.text)
async def process_quantity(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    quantity_text = message.text.strip().replace(",", ".")
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
        quantity = float(quantity_text)
        if quantity <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    await state.update_data(quantity=quantity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:", reply_markup=skip_cancel_kb)
    await state.set_state(PurchaseForm.note)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Airtable –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
async def _save_data_and_finish(obj, state: FSMContext):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Airtable –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç obj ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ CallbackQuery.
    """
    data = await state.get_data()
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(obj, Message):
            user = obj.from_user
        elif isinstance(obj, CallbackQuery):
            user = obj.from_user
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
            await obj.answer()
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞")

        sender_name = user.first_name
        if user.last_name:
            sender_name += " " + user.last_name
        data['sender_name'] = sender_name

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Airtable
        record_data = {
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": data['name'],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": data['quantity'], 
            "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å": data['sender_name']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if data.get('note'):
            record_data["–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"] = data['note']
            
        # –î–æ–±–∞–≤–ª—è–µ–º "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if data.get('deadline'):
            record_data["–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"] = data['deadline']
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Airtable
        await airtable_client.create_record(record_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        response_lines = [
            "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n",
            f"<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> {data['name']}",
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {data['quantity']}"   
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ" –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
        if data.get('note'):
            response_lines.append(f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {data['note']}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if data.get('deadline'):
            response_lines.append(f"<b>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {data['deadline']}")
            
        response_lines.append(f"<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {data['sender_name']}")
        response_text = "\n".join(response_lines)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if isinstance(obj, Message):
            await obj.answer(response_text, reply_markup=main_kb)
        elif isinstance(obj, CallbackQuery):
            await obj.message.answer(response_text, reply_markup=main_kb)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Airtable:\n<code>{str(e)}</code>"
        if isinstance(obj, Message):
            await obj.answer(error_msg)
        elif isinstance(obj, CallbackQuery):
            await obj.message.answer(error_msg)
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –Ω–∞ —à–∞–≥–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
@router.message(PurchaseForm.note, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_note(message: Message, state: FSMContext):
    await state.update_data(note="")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state(PurchaseForm.deadline)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è ‚Äî —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ù–ï "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@router.message(PurchaseForm.note, F.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def process_note(message: Message, state: FSMContext):
    note_text = message.text.strip()
    await state.update_data(note=note_text)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await state.set_state(PurchaseForm.deadline)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –Ω–∞ —à–∞–≥–µ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
@router.message(PurchaseForm.deadline, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_deadline(message: Message, state: FSMContext):
    await state.update_data(deadline=None) 
    await _save_data_and_finish(message, state)

@router.callback_query(SimpleCalendarCallback.filter(), PurchaseForm.deadline)
async def process_calendar(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    selected, date_obj = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        today = date.today()
        if date_obj.date() < today:
            # –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            await callback_query.message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º",
                reply_markup=await SimpleCalendar().start_calendar()
            )
            return  # –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∂–¥—ë–º –Ω–æ–≤—É—é –¥–∞—Ç—É

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2024-05-21")
        deadline_str = date_obj.strftime("%Y-%m-%d")
        await state.update_data(deadline=deadline_str)
        await _save_data_and_finish(callback_query, state)
